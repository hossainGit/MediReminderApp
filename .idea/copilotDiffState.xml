<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/mediTime.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/mediTime.kt" />
              <option name="originalContent" value="package com.example.myapplication&#10;&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.myapplication.MedicationUtils&#10;import com.example.myapplication.Medication&#10;import com.example.myapplication.MedicationUtils&#10;import com.example.myapplication.Medication&#10;import org.json.JSONArray&#10;&#10;&#10;class mediTime : Fragment() {&#10;&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val meds = MedicationUtils.getMedications(requireContext())&#10;        linear.removeAllViews()&#10;&#10;        // Group by times&#10;        val groups = mapOf(&#10;            &quot;Morning&quot; to mutableListOf&lt;String&gt;(),&#10;            &quot;Noon&quot; to mutableListOf&lt;String&gt;(),&#10;            &quot;Night&quot; to mutableListOf&lt;String&gt;()&#10;        )&#10;&#10;        for (med in meds) {&#10;        for (med in meds) {&#10;            for (t in med.times) {&#10;                groups[t]?.add(&quot;${med.name} (${med.dosage}) - ${med.mealInstruction}&quot;)&#10;            linear.addView(header)&#10;&#10;            for (med in list) {&#10;                val tv = TextView(requireContext())&#10;                tv.text = med&#10;                linear.addView(tv)&#10;            }&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    }&#10;" />
              <option name="updatedContent" value="package com.example.myapplication&#10;&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.LinearLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import org.json.JSONArray&#10;&#10;&#10;class mediTime : Fragment() {&#10;&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_medi_time, container, false)&#10;&#10;        val sp = requireContext().getSharedPreferences(&quot;myData&quot;, AppCompatActivity.MODE_PRIVATE)&#10;        val medsJson = sp.getString(&quot;medications&quot;, &quot;[]&quot;)&#10;        val jsonArray = JSONArray(medsJson)&#10;&#10;        val linear = view.findViewById&lt;LinearLayout&gt;(R.id.scrollView3).getChildAt(0) as LinearLayout&#10;        linear.removeAllViews()&#10;&#10;        // Group by times&#10;        val groups = mapOf(&#10;            &quot;Morning&quot; to mutableListOf&lt;String&gt;(),&#10;            &quot;Noon&quot; to mutableListOf&lt;String&gt;(),&#10;            &quot;Night&quot; to mutableListOf&lt;String&gt;()&#10;        )&#10;&#10;        for (i in 0 until jsonArray.length()) {&#10;            val obj = jsonArray.getJSONObject(i)&#10;            val name = obj.getString(&quot;name&quot;)&#10;            val dosage = obj.getString(&quot;dosage&quot;)&#10;            val meal = obj.getString(&quot;meal&quot;)&#10;            val times = obj.getJSONArray(&quot;times&quot;)&#10;&#10;            for (j in 0 until times.length()) {&#10;                val t = times.getString(j)&#10;                groups[t]?.add(&quot;$name ($dosage) - $meal&quot;)&#10;            }&#10;        }&#10;&#10;        // Add section headers + items&#10;        for ((time, list) in groups) {&#10;            val header = TextView(requireContext())&#10;            header.text = time&#10;            header.textSize = 20f&#10;            linear.addView(header)&#10;&#10;            for (med in list) {&#10;                val tv = TextView(requireContext())&#10;                tv.text = med&#10;                linear.addView(tv)&#10;            }&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>